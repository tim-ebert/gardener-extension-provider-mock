// Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package worker

import (
	"context"
	"fmt"
	mockv1alpha1 "github.com/gardener/gardener-extension-provider-mock/pkg/apis/mock/v1alpha1"
	"github.com/gardener/gardener-extension-provider-mock/pkg/imagevector"
	"github.com/gardener/gardener-extension-provider-mock/pkg/mock"
	"github.com/gardener/gardener-extensions/pkg/controller"
	extensionscontroller "github.com/gardener/gardener-extensions/pkg/controller"
	extensionutil "github.com/gardener/gardener-extensions/pkg/util"
	"github.com/gardener/gardener-resource-manager/pkg/manager"
	v1beta1constants "github.com/gardener/gardener/pkg/apis/core/v1beta1/constants"
	extensionsv1alpha1 "github.com/gardener/gardener/pkg/apis/extensions/v1alpha1"
	"github.com/gardener/gardener/pkg/utils"
	kutil "github.com/gardener/gardener/pkg/utils/kubernetes"
	"github.com/gardener/gardener/pkg/utils/secrets"
	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/client-go/util/retry"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"time"
)

func (a *actuator) Reconcile(ctx context.Context, worker *extensionsv1alpha1.Worker, cluster *controller.Cluster) error {
	workerConfig := &mockv1alpha1.WorkerConfig{}
	poolSpec := worker.Spec.Pools[0]
	if poolSpec.ProviderConfig != nil {
		if _, _, err := a.Decoder().Decode(poolSpec.ProviderConfig.Raw, nil, workerConfig); err != nil {
			return fmt.Errorf("could not decode provider config: %+v", err)
		}
	}

	values, err := a.computeMockWorkerChartValues(ctx, worker, workerConfig, cluster)
	if err != nil {
		return fmt.Errorf("failed to compute values for mock worker chart: %+v", err)
	}
	release, err := a.ChartRenderer().Render(mock.MockWorkerChartPath, mock.MockWorkerReleaseName, worker.Namespace, values)
	if err != nil {
		return err
	}

	// TODO: use something like in RenderChartAndCreateManagedResource
	if err := manager.NewSecret(a.Client()).
		WithKeyValues(map[string][]byte{mock.MockWorkerKey: release.Manifest()}).
		WithNamespacedName(worker.Namespace, mock.MockWorkerSecretName).
		Reconcile(ctx); err != nil {
		return err
	}

	if err := manager.
		NewManagedResource(a.Client()).
		WithNamespacedName(worker.Namespace, mock.MockWorkerSecretName).
		WithSecretRefs([]corev1.LocalObjectReference{{Name: mock.MockWorkerSecretName}}).
		WithClass(v1beta1constants.SeedResourceManagerClass).
		Reconcile(ctx); err != nil {
		return err
	}

	if err := a.updateWorkerStatus(ctx, worker); err != nil {
		return errors.Wrapf(err, "failed to update the worker status")
	}

	return nil
}

// computeMockWorkerChartValues computes the values for the mock-worker chart.
func (a *actuator) computeMockWorkerChartValues(ctx context.Context, worker *extensionsv1alpha1.Worker, config *mockv1alpha1.WorkerConfig, cluster *extensionscontroller.Cluster) (map[string]interface{}, error) {
	_, shootClient, err := extensionutil.NewClientForShoot(ctx, a.Client(), worker.Namespace, client.Options{})
	if err != nil {
		return nil, fmt.Errorf("failed to create shoot client: %+v", err)
	}

	bootstrapTokenID := utils.ComputeSHA256Hex([]byte(worker.Name))[:6]
	bootstrapTokenSecret, err := kutil.ComputeBootstrapToken(ctx, shootClient, bootstrapTokenID, "A bootstrap token generated by the Gardener Mock Provider", 48*time.Hour)
	if err != nil {
		return nil, fmt.Errorf("failed to compute bootstrap token for shoot: %+v", err)
	}

	caSecret := &corev1.Secret{}
	if err := a.Client().Get(ctx, client.ObjectKey{Namespace: worker.Namespace, Name: v1beta1constants.SecretNameCACluster}, caSecret); err != nil {
		return nil, fmt.Errorf("failed to retreive Shoot CA secret: %+v", err)
	}

	values := map[string]interface{}{
		"images": map[string]interface{}{
			mock.HyperkubeImageName: imagevector.HyperkubeImage(cluster.Shoot.Spec.Kubernetes.Version),
			mock.DinDImageName:      imagevector.DinDImage(),
		},
		"nodeCount": 1, // only single node mock shoot supported for now
		"worker": map[string]interface{}{
			"pool": worker.Spec.Pools[0].Name,
		},
		"auth": map[string]interface{}{
			"bootstrapToken": kutil.BootstrapTokenFrom(bootstrapTokenSecret.Data),
			"caCert":         string(caSecret.Data[secrets.DataKeyCertificateCA]),
		},
	}
	return values, nil
}

func (a *actuator) updateWorkerStatus(ctx context.Context, worker *extensionsv1alpha1.Worker) error {
	return extensionscontroller.TryUpdateStatus(ctx, retry.DefaultBackoff, a.Client(), worker, func() error {
		return nil
	})
}
